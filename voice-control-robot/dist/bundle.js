(()=>{"use strict";class t{constructor(t){this.socket=null,this.config=t}connect(){return new Promise((t,e)=>{const s=`ws://${this.config.ip}:${this.config.port}/vexrobotics.vexcode/device?id=${this.config.id}`;console.log("Attempting to connect to:",s),this.socket=new WebSocket(s),this.socket.onopen=()=>{console.log("WebSocket connected successfully"),this.onStatusChangeCallback?.(!0),t()},this.socket.onmessage=t=>{console.log("WebSocket message received:",t.data),this.onMessageCallback&&this.onMessageCallback(t.data)},this.socket.onerror=t=>{console.error("WebSocket error:",t)},this.socket.onclose=t=>{console.log("WebSocket disconnected. Code:",t.code,"Reason:",t.reason),this.onStatusChangeCallback?.(!1),1e3!==t.code&&e(new Error(`WebSocket closed with code ${t.code}: ${t.reason}`))}})}send(t){this.socket&&this.socket.readyState===WebSocket.OPEN?this.socket.send(t):console.error("WebSocket not connected")}disconnect(){this.socket&&(this.socket.close(),this.socket=null)}onMessage(t){this.onMessageCallback=t}onStatusChange(t){this.onStatusChangeCallback=t}isConnected(){return this.socket?.readyState===WebSocket.OPEN}}class e{constructor(){if(this.isListening=!1,!("webkitSpeechRecognition"in window)&&!("SpeechRecognition"in window))throw new Error("Speech recognition not supported");{const t=window.SpeechRecognition||window.webkitSpeechRecognition;this.recognition=new t,this.setupRecognition()}}setupRecognition(){this.recognition.continuous=!1,this.recognition.interimResults=!1,this.recognition.lang="en-US",this.recognition.maxAlternatives=1,this.recognition.onresult=t=>{const e=t.results[0],s={command:e[0].transcript.toLowerCase(),confidence:e[0].confidence,timestamp:new Date};this.onResultCallback?.(s)},this.recognition.onerror=t=>{this.onErrorCallback?.(t.error)},this.recognition.onend=()=>{this.isListening&&(console.log("Speech recognition ended, restarting..."),this.recognition.start())}}start(){this.isListening||(this.isListening=!0,this.recognition.start())}stop(){this.isListening=!1,this.recognition.stop(),console.log("Speech recognition stopped by user")}onResult(t){this.onResultCallback=t}onError(t){this.onErrorCallback=t}getListeningStatus(){return this.isListening}}var s;!function(t){t.FORWARD="FORWARD",t.BACKWARD="BACKWARD",t.LEFT="LEFT",t.RIGHT="RIGHT",t.STOP="STOP",t.INTAKE="INTAKE",t.SCORE="SCORE"}(s||(s={}));class n{constructor(){this.commandMap=new Map([["forward",s.FORWARD],["backward",s.BACKWARD],["back",s.BACKWARD],["left",s.LEFT],["right",s.RIGHT],["stop",s.STOP],["intake",s.INTAKE],["score",s.SCORE]])}processVoiceCommand(t){const e=t.command.split(" ");for(const s of e){const e=this.commandMap.get(s);if(e)return{action:e,parameters:this.extractParameters(t.command,e)}}return null}extractParameters(t,e){const s=t.match(/\d+/g);return s&&s.length>0?{value:parseInt(s[0])}:{}}getSupportedCommands(){return Array.from(this.commandMap.keys())}isValidCommand(t){return this.commandMap.has(t.toLowerCase())}}class o{constructor(){this.websocket=null,this.isConnected=!1,this.deviceId="",this.speech=new e,this.commandProcessor=new n,this.setupEventHandlers(),this.initializeUI()}setupEventHandlers(){this.speech.onResult(t=>{this.handleVoiceCommand(t)}),this.speech.onError(t=>{this.displayError(`Speech error: ${t}`)})}async handleVoiceCommand(t){this.displayMessage(`Heard: "${t.command}"`);const e=this.commandProcessor.processVoiceCommand(t);e?this.executeRobotCommand(e):this.displayError(`Unknown command: "${t.command}"`)}executeRobotCommand(t){if(!this.isConnected)return void this.displayError("Not connected to robot");const e=this.formatRobotCommand(t);this.websocket?.send(e),this.displayMessage(`Executing: ${t.action} (char: '${e}')`)}formatRobotCommand(t){switch(t.action){case s.FORWARD:return"a";case s.BACKWARD:return"b";case s.LEFT:return"l";case s.RIGHT:return"d";case s.STOP:return"p";case s.INTAKE:return"i";case s.SCORE:return"s";default:return"p"}}updateConnectionStatus(t){const e=document.getElementById("connection-status");e&&(e.textContent=t?"🟢 Connected":"🔴 Disconnected",e.className=t?"status connected":"status disconnected")}displayMessage(t){const e=document.getElementById("output");if(e){const s=(new Date).toLocaleTimeString();e.innerHTML+=`<div>[${s}] ${t}</div>`,e.scrollTop=e.scrollHeight}}displayError(t){this.displayMessage(`❌ ${t}`)}updateListeningStatus(t){const e=document.getElementById("listening-status");e&&(t?(e.textContent="🎤 Listening for voice commands...",e.className="listening-status listening"):(e.textContent="🔇 Not listening",e.className="listening-status"))}parseRobotStatus(t){if(t.includes("STATUS:")){const e=t.split(":");if(e.length>=3){const t=e[1].trim(),s=e[2].trim(),n=document.getElementById("current-heading"),o=document.getElementById("distance-driven");n&&(n.textContent=t),o&&(o.textContent=s)}}}initializeUI(){const e=document.getElementById("device-id-input"),s=document.getElementById("connect-btn");e&&s&&(s.disabled=!0,e.addEventListener("input",()=>{this.deviceId=e.value.trim(),s.disabled=0===this.deviceId.length}),s.addEventListener("click",async()=>{try{this.displayMessage("Attempting to connect to VEX Extension..."),this.websocket=new t({id:this.deviceId,port:"7071",ip:"localhost"}),this.setupWebSocketHandlers(),await this.websocket.connect(),this.displayMessage("✅ Successfully connected to VEX Extension!")}catch(t){this.displayError(`Connection failed: ${t}`),this.displayMessage("💡 Make sure VEX Extension is running and WebSocket Server is enabled")}}));const n=document.getElementById("listen-btn");n&&n.addEventListener("click",()=>{"Start Listening"===n.textContent?(this.speech.start(),n.textContent="Stop Listening",n.className="btn btn-danger",this.updateListeningStatus(!0),this.displayMessage("🎤 Voice recognition started - speak commands continuously")):(this.speech.stop(),n.textContent="Start Listening",n.className="btn btn-success",this.updateListeningStatus(!1),this.displayMessage("🔇 Voice recognition stopped"))});const o=document.getElementById("clear-btn");o&&o.addEventListener("click",()=>{const t=document.getElementById("output");t&&(t.innerHTML="")})}setupWebSocketHandlers(){this.websocket&&(this.websocket.onStatusChange(t=>{this.isConnected=t,this.updateConnectionStatus(t)}),this.websocket.onMessage(t=>{this.displayMessage(`Robot: ${t}`),this.parseRobotStatus(t)}))}async start(){this.displayMessage('Voice control system ready. Click "Connect to Robot" to start.')}}document.addEventListener("DOMContentLoaded",()=>{(new o).start()})})();