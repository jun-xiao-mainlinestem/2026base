(()=>{"use strict";class t{constructor(t){this.socket=null,this.config=t}connect(){return new Promise((t,e)=>{const n=`ws://${this.config.ip}:${this.config.port}/vexrobotics.vexcode/device?id=${this.config.id}`;console.log("Attempting to connect to:",n),this.socket=new WebSocket(n),this.socket.onopen=()=>{console.log("WebSocket connected successfully"),this.onStatusChangeCallback?.(!0),t()},this.socket.onmessage=t=>{if(console.log("WebSocket message received:",t.data),console.log("Data type:",typeof t.data),t.data instanceof Blob){console.log("Received Blob data, reading as text...");const e=new FileReader;e.onload=()=>{const t=e.result;console.log("Blob converted to text:",t),this.onMessageCallback&&this.onMessageCallback(t)},e.readAsText(t.data)}else{const e="string"==typeof t.data?t.data:String(t.data);this.onMessageCallback&&this.onMessageCallback(e)}},this.socket.onerror=t=>{console.error("WebSocket error:",t)},this.socket.onclose=t=>{console.log("WebSocket disconnected. Code:",t.code,"Reason:",t.reason),this.onStatusChangeCallback?.(!1),1e3!==t.code&&e(new Error(`WebSocket closed with code ${t.code}: ${t.reason}`))}})}send(t){this.socket&&this.socket.readyState===WebSocket.OPEN?this.socket.send(t):console.error("WebSocket not connected")}disconnect(){this.socket&&(this.socket.close(),this.socket=null)}onMessage(t){this.onMessageCallback=t}onStatusChange(t){this.onStatusChangeCallback=t}isConnected(){return this.socket?.readyState===WebSocket.OPEN}}class e{constructor(){if(this.isListening=!1,!("webkitSpeechRecognition"in window)&&!("SpeechRecognition"in window))throw new Error("Speech recognition not supported");{const t=window.SpeechRecognition||window.webkitSpeechRecognition;this.recognition=new t,this.setupRecognition()}}setupRecognition(){this.recognition.continuous=!1,this.recognition.interimResults=!1,this.recognition.lang="en-US",this.recognition.maxAlternatives=1,this.recognition.onresult=t=>{const e=t.results[0],n={command:e[0].transcript.toLowerCase(),confidence:e[0].confidence,timestamp:new Date};this.onResultCallback?.(n)},this.recognition.onerror=t=>{this.onErrorCallback?.(t.error)},this.recognition.onend=()=>{this.isListening&&(console.log("Speech recognition ended, restarting..."),this.recognition.start())}}start(){this.isListening||(this.isListening=!0,this.recognition.start())}stop(){this.isListening=!1,this.recognition.stop(),console.log("Speech recognition stopped by user")}onResult(t){this.onResultCallback=t}onError(t){this.onErrorCallback=t}getListeningStatus(){return this.isListening}}var n;!function(t){t.FORWARD="FORWARD",t.BACKWARD="BACKWARD",t.LEFT="LEFT",t.RIGHT="RIGHT",t.STOP="STOP",t.INTAKE="INTAKE",t.SCORE="SCORE"}(n||(n={}));class s{constructor(){this.commandMap=new Map([["move",n.FORWARD],["back",n.BACKWARD],["left",n.LEFT],["right",n.RIGHT],["stop",n.STOP],["roll",n.INTAKE],["shoot",n.SCORE]])}processVoiceCommand(t){console.log("Processing voice command:",t.command);const e=t.command.split(" ");console.log("Split words:",e);for(const n of e){console.log("Checking word:",n);const e=this.commandMap.get(n);if(console.log("Found action:",e),e)return{action:e,parameters:this.extractParameters(t.command,e)}}return console.log("No matching command found"),null}extractParameters(t,e){const n=t.match(/\d+/g);return n&&n.length>0?{value:parseInt(n[0])}:{}}getSupportedCommands(){return Array.from(this.commandMap.keys())}isValidCommand(t){return this.commandMap.has(t.toLowerCase())}}class o{constructor(){this.websocket=null,this.isConnected=!1,this.deviceId="",this.speech=new e,this.commandProcessor=new s,this.setupEventHandlers(),this.initializeUI()}setupEventHandlers(){this.speech.onResult(t=>{this.handleVoiceCommand(t)}),this.speech.onError(t=>{this.displayError(`Speech error: ${t}`)})}async handleVoiceCommand(t){console.log("Voice command received:",t),this.displayMessage(`Heard: "${t.command}"`);const e=this.commandProcessor.processVoiceCommand(t);console.log("Processed robot command:",e),e?this.executeRobotCommand(e):this.displayError(`Unknown command: "${t.command}"`)}executeRobotCommand(t){if(!this.isConnected)return void this.displayError("Not connected to robot");const e=this.formatRobotCommand(t);this.websocket?.send(e),this.displayMessage(`Executing: ${t.action} (char: '${e}')`)}formatRobotCommand(t){switch(t.action){case n.FORWARD:return"a";case n.BACKWARD:return"b";case n.LEFT:return"l";case n.RIGHT:return"d";case n.STOP:return"p";case n.INTAKE:return"i";case n.SCORE:return"s";default:return"p"}}updateConnectionStatus(t){const e=document.getElementById("connection-status"),n=document.getElementById("listen-btn");e&&(e.textContent=t?"üü¢ Connected":"üî¥ Disconnected",e.className=t?"status connected":"status disconnected"),n&&(n.disabled=!t,t||(this.speech.stop(),n.textContent="Start Listening",n.className="btn btn-success",this.updateListeningStatus(!1)))}displayMessage(t){const e=document.getElementById("output");if(e){const n=(new Date).toLocaleTimeString();e.innerHTML+=`<div>[${n}] ${t}</div>`,e.scrollTop=e.scrollHeight}}displayError(t){this.displayMessage(`‚ùå ${t}`)}updateListeningStatus(t){const e=document.getElementById("listening-status");e&&(t?(e.textContent="üé§ Listening for voice commands...",e.className="listening-status listening"):(e.textContent="üîá Not listening",e.className="listening-status"))}displayCommandList(){const t=document.getElementById("output");if(t){const e=(new Date).toLocaleTimeString(),n='\n        <div class="command-list-display">\n          <strong>üìã Available Commands:</strong><br>\n          <span class="command-tag">move</span>\n          <span class="command-tag">back</span>\n          <span class="command-tag">left</span>\n          <span class="command-tag">right</span>\n          <span class="command-tag">stop</span>\n          <span class="command-tag">roll</span>\n          <span class="command-tag">shoot</span>\n        </div>\n      ';t.innerHTML+=`<div>[${e}] ${n}</div>`,t.scrollTop=t.scrollHeight}}clearCommandList(){const t=document.getElementById("output");t&&t.querySelectorAll("div").forEach(t=>{t.innerHTML.includes("Available Commands:")&&t.remove()})}parseRobotStatus(t){if(console.log("parseRobotStatus called with data:",t),console.log("Data type:",typeof t),console.log("Data length:",t.length),"string"==typeof t)if(t.includes("STATUS:")){console.log("Found STATUS in data, parsing...");const e=t.split(":");if(console.log("Split parts:",e),e.length>=3){const t=e[1].trim(),n=e[2].trim();console.log("Extracted heading:",t,"distance:",n);const s=document.getElementById("current-heading"),o=document.getElementById("distance-driven");console.log("Heading element found:",!!s),console.log("Distance element found:",!!o),s&&(s.textContent=t,console.log("Updated heading element to:",t)),o&&(o.textContent=n,console.log("Updated distance element to:",n))}else console.warn("STATUS message has insufficient parts:",e)}else console.log("No STATUS found in data");else console.warn("Received non-string data:",t)}initializeUI(){const e=document.getElementById("device-id-input"),n=document.getElementById("connect-btn");e&&n&&(n.disabled=!0,e.addEventListener("input",()=>{this.deviceId=e.value.trim(),n.disabled=0===this.deviceId.length}),n.addEventListener("click",async()=>{try{this.displayMessage("Attempting to connect to VEX Extension..."),this.websocket=new t({id:this.deviceId,port:"7071",ip:"localhost"}),this.setupWebSocketHandlers(),await this.websocket.connect(),this.displayMessage("‚úÖ Successfully connected to VEX Extension!")}catch(t){this.displayError(`Connection failed: ${t}`),this.displayMessage("üí° Make sure VEX Extension is running and WebSocket Server is enabled")}}));const s=document.getElementById("listen-btn");s&&(s.disabled=!0,s.addEventListener("click",()=>{"Start Listening"===s.textContent?(this.speech.start(),s.textContent="Stop Listening",s.className="btn btn-danger",this.updateListeningStatus(!0),this.displayMessage("üé§ Voice recognition started - speak commands continuously"),this.displayCommandList()):(this.speech.stop(),s.textContent="Start Listening",s.className="btn btn-success",this.updateListeningStatus(!1),this.displayMessage("üîá Voice recognition stopped"),this.clearCommandList())}));const o=document.getElementById("clear-btn");o&&o.addEventListener("click",()=>{const t=document.getElementById("output");t&&(t.innerHTML="")})}setupWebSocketHandlers(){this.websocket&&(this.websocket.onStatusChange(t=>{this.isConnected=t,this.updateConnectionStatus(t)}),this.websocket.onMessage(t=>{this.displayMessage(`Robot: ${t}`),this.parseRobotStatus(t)}))}async start(){this.displayMessage('Voice control system ready. Click "Connect to Robot" to start.')}}document.addEventListener("DOMContentLoaded",()=>{(new o).start()})})();